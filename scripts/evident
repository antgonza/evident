#!/usr/bin/env python
# -----------------------------------------------------------------------------
# Copyright (c) 2018, The Evident Development Team.
#
# Distributed under the terms of the BSD 3-clause License.
#
# The full license is in the file LICENSE, distributed with this software.
# -----------------------------------------------------------------------------

import click

from os import mkdir
from os.path import isdir

from evident.effect_size import effect_size as _effect_size
from evident.summarize_mdfdr import summarize as _summarize


@click.group()
def effect_size_group():
    pass


@click.option('--mappings', multiple=True, type=click.Path(exists=True),
              help='mapping directory filepath')
@click.option('--alphas', multiple=True, type=click.Path(exists=True),
              help='alpha directory filepath')
@click.option('--betas', multiple=True, type=click.Path(exists=True),
              help='beta directory filepath')
@click.option('--output', type=click.Path(exists=False),
              help='output filepath')
@click.option('--jobs', type=click.IntRange(1, 64), default=1,
              help='jobs to start')
@click.option('--permutations', type=click.IntRange(10, 10000), default=10,
              help='jobs to start')
@click.option('--na-values', multiple=True, type=str, default='NA')
@click.option('--overwrite', type=bool, default=False, help='if true then the '
              'output file will be overwritten')
@effect_size_group.command()
def effect_size(mappings, alphas, betas, output, jobs, permutations,
                overwrite, na_values):
    if not mappings:
        raise ValueError("You need to pass a mappings")
    if not alphas and not betas:
        raise ValueError("You need to pass either alphas or betas")
    if alphas and betas:
        raise ValueError("You can't pass both alphas and betas")
    if output is None:
        raise ValueError("You need to pass a output")

    if not isdir(output):
        mkdir(output)

    _effect_size(mappings, alphas, betas, output, jobs, permutations,
                 overwrite, na_values)


@click.group()
def summarize_group():
    pass


@click.option('--input-fp', type=click.Path(exists=True),
              help='input filepath')
@click.option('--output-fp', type=click.Path(exists=False),
              help='output filepath')
@click.option('--check-pval/--no-pval-check', default=True)
@summarize_group.command()
def summarize(input_fp, output_fp, check_pval):
    _summarize(input_fp, output_fp, check_pval)


commands = click.CommandCollection(sources=[
    effect_size_group, summarize_group])


if __name__ == '__main__':
    commands()
